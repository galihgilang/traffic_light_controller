C51 COMPILER V6.22f  SIO                                                                   02/14/2002 12:21:24 PAGE 1   


C51 COMPILER V6.22f, COMPILATION OF MODULE SIO
OBJECT MODULE PLACED IN SIO.OBJ
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE SIO.C OPTIMIZE(6,SPEED) BROWSE DEFINE(XTAL=12000000) DEBUG OBJECTEXTEND COD
                    -E SYMBOLS

stmt level    source

   1          /*------------------------------------------------------------------------------
   2          SIO.C:  Serial Communication Routines.
   3          
   4          Copyright 1995-2002 KEIL Software, Inc.
   5          ------------------------------------------------------------------------------*/
   6          
   7          #include <reg51.h>
   8          #include <string.h>
   9          #include "sio.h"
  10          
  11          /*------------------------------------------------------------------------------
  12          ------------------------------------------------------------------------------*/
  13          #define TBUF_SIZE       256             /* DO NOT CHANGE */
  14          #define RBUF_SIZE       256             /* DO NOT CHANGE */
  15          
  16          static xdata unsigned char tbuf [TBUF_SIZE];
  17          static xdata unsigned char rbuf [RBUF_SIZE];
  18          
  19          static xdata unsigned char t_in = 0;
  20          static xdata unsigned char t_out = 0;
  21          static xdata unsigned char t_disabled = 0;
  22          
  23          static xdata unsigned char r_in = 0;
  24          static xdata unsigned char r_out = 0;
  25          
  26          /*------------------------------------------------------------------------------
  27          ------------------------------------------------------------------------------*/
  28          static void com_isr (void) interrupt 4 using 2
  29          {
  30   1      /*------------------------------------------------
  31   1      Received data interrupt.
  32   1      ------------------------------------------------*/
  33   1      if (RI != 0)
  34   1        {
  35   2        RI = 0;
  36   2      
  37   2        if ((r_in + 1) != r_out)
  38   2          rbuf [r_in++] = SBUF;
  39   2        }
  40   1      
  41   1      /*------------------------------------------------
  42   1      Transmitted data interrupt.
  43   1      ------------------------------------------------*/
  44   1      if (TI != 0)
  45   1        {
  46   2        TI = 0;
  47   2      
  48   2        if (t_in != t_out)
  49   2          SBUF = tbuf [t_out++];
  50   2        else
  51   2          t_disabled = 1;
  52   2        }
  53   1      
  54   1      }
C51 COMPILER V6.22f  SIO                                                                   02/14/2002 12:21:24 PAGE 2   

  55          
  56          /*------------------------------------------------------------------------------
  57          ------------------------------------------------------------------------------*/
  58          void com_initialize (void)
  59          {
  60   1      /*------------------------------------------------
  61   1      Setup TIMER1 to generate the proper baud rate.
  62   1      ------------------------------------------------*/
  63   1      com_baudrate (1200);
  64   1      
  65   1      /*------------------------------------------------
  66   1      Clear com buffer indexes.
  67   1      ------------------------------------------------*/
  68   1      EA = 0;                         /* Disable Interrupts */
  69   1      
  70   1      t_in = 0;
  71   1      t_out = 0;
  72   1      t_disabled = 1;
  73   1      
  74   1      r_in = 0;
  75   1      r_out = 0;
  76   1      
  77   1      /*------------------------------------------------
  78   1      Setup serial port registers.
  79   1      ------------------------------------------------*/
  80   1      SM0 = 0; SM1 = 1;               /* serial port MODE 1 */
  81   1      SM2 = 0;
  82   1      REN = 1;                        /* enable serial receiver */
  83   1      
  84   1      TI = 0;                         /* clear transmit interrupt */
  85   1      RI = 0;                         /* clear receiver interrupt */
  86   1      
  87   1      ES = 1;                         /* enable serial interrupts */
  88   1      PS = 0;                         /* set serial interrupts to low priority */
  89   1      
  90   1      EA = 1;                         /* Enable Interrupts */
  91   1      }
  92          
  93          /*------------------------------------------------------------------------------
  94          ------------------------------------------------------------------------------*/
  95          void com_baudrate (
  96            unsigned baudrate)
  97          {
  98   1      EA = 0;                             /* Disable Interrupts */
  99   1      
 100   1      /*------------------------------------------------
 101   1      Clear transmit interrupt and buffer.
 102   1      ------------------------------------------------*/
 103   1      TI = 0;                             /* clear transmit interrupt */
 104   1      t_in = 0;                           /* empty transmit buffer */
 105   1      t_out = 0;
 106   1      t_disabled = 1;                     /* disable transmitter */
 107   1      
 108   1      /*------------------------------------------------
 109   1      Set timer 1 up as a baud rate generator.
 110   1      ------------------------------------------------*/
 111   1      TR1 = 0;                            /* stop timer 1 */
 112   1      ET1 = 0;                            /* disable timer 1 interrupt */
 113   1      
 114   1      PCON |= 0x80;                       /* 0x80=SMOD: set serial baudrate doubler */
 115   1      
 116   1      TMOD &= ~0xF0;                      /* clear timer 1 mode bits */
C51 COMPILER V6.22f  SIO                                                                   02/14/2002 12:21:24 PAGE 3   

 117   1      TMOD |= 0x20;                       /* put timer 1 into MODE 2 */
 118   1      
 119   1      TH1 = (unsigned char) (256 - (XTAL / (16L * 12L * baudrate)));
 120   1      
 121   1      TR1 = 1;                            /* start timer 1 */
 122   1      
 123   1      EA = 1;                             /* Enable Interrupts */
 124   1      }
 125          
 126          /*------------------------------------------------------------------------------
 127          ------------------------------------------------------------------------------*/
 128          char com_putchar (
 129            unsigned char c)
 130          {
 131   1      /*------------------------------------------------
 132   1      If the buffer is full, return an error value.
 133   1      ------------------------------------------------*/
 134   1      if ((TBUF_SIZE - com_tbuflen ()) <= 2)
 135   1        return (-1);
 136   1      
 137   1      /*------------------------------------------------
 138   1      Add the data to the transmit buffer.  If the
 139   1      transmit interrupt is disabled, then enable it.
 140   1      ------------------------------------------------*/
 141   1      EA = 0;                         /* Disable Interrupts */
 142   1      
 143   1      tbuf [t_in++] = c;
 144   1      
 145   1      if (t_disabled)                 /* if transmitter is disabled */
 146   1        {
 147   2        t_disabled = 0;
 148   2        TI = 1;                       /* enable it */
 149   2        }
 150   1      
 151   1      EA = 1;                         /* Enable Interrupts */
 152   1      
 153   1      return (0);
 154   1      }
 155          
 156          /*------------------------------------------------------------------------------
 157          ------------------------------------------------------------------------------*/
 158          int com_getchar (void)
 159          {
 160   1      int c;
 161   1      
 162   1      if (com_rbuflen () == 0)
 163   1        return (-1);
 164   1      
 165   1      EA = 0;                         /* Disable Interrupts */
 166   1      c = rbuf [r_out++];
 167   1      EA = 1;                         /* Enable Interrupts */
 168   1      
 169   1      return (c);
 170   1      }
 171          
 172          /*------------------------------------------------------------------------------
 173          ------------------------------------------------------------------------------*/
 174          unsigned char com_rbuflen (void)
 175          {
 176   1      return (r_in - r_out);
 177   1      }
 178          
C51 COMPILER V6.22f  SIO                                                                   02/14/2002 12:21:24 PAGE 4   

 179          /*------------------------------------------------------------------------------
 180          ------------------------------------------------------------------------------*/
 181          unsigned char com_tbuflen (void)
 182          {
 183   1      return (t_in - t_out);
 184   1      }
 185          
 186          /*------------------------------------------------------------------------------
 187          ------------------------------------------------------------------------------*/
 188          
C51 COMPILER V6.22f  SIO                                                                   02/14/2002 12:21:24 PAGE 5   

ASSEMBLY LISTING OF GENERATED OBJECT CODE


             ; FUNCTION com_isr (BEGIN)
0000 C0E0              PUSH    ACC
0002 C083              PUSH    DPH
0004 C082              PUSH    DPL
0006 C0D0              PUSH    PSW
0008 75D010            MOV     PSW,#010H
                                           ; SOURCE LINE # 28
                                           ; SOURCE LINE # 33
000B 309828            JNB     RI,?C0001
                                           ; SOURCE LINE # 34
                                           ; SOURCE LINE # 35
000E C298              CLR     RI
                                           ; SOURCE LINE # 37
0010 900000      R     MOV     DPTR,#r_in
0013 E0                MOVX    A,@DPTR
0014 2401              ADD     A,#01H
0016 FF                MOV     R7,A
0017 E4                CLR     A
0018 33                RLC     A
0019 FE                MOV     R6,A
001A A3                INC     DPTR
001B E0                MOVX    A,@DPTR
001C 6F                XRL     A,R7
001D 7001              JNZ     ?C0016
001F EE                MOV     A,R6
0020         ?C0016:
0020 6014              JZ      ?C0001
                                           ; SOURCE LINE # 38
0022 900000      R     MOV     DPTR,#r_in
0025 E0                MOVX    A,@DPTR
0026 FF                MOV     R7,A
0027 04                INC     A
0028 F0                MOVX    @DPTR,A
0029 7400        R     MOV     A,#LOW rbuf
002B 2F                ADD     A,R7
002C F582              MOV     DPL,A
002E E4                CLR     A
002F 3400        R     ADDC    A,#HIGH rbuf
0031 F583              MOV     DPH,A
0033 E599              MOV     A,SBUF
0035 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 39
0036         ?C0001:
                                           ; SOURCE LINE # 44
0036 309927            JNB     TI,?C0006
                                           ; SOURCE LINE # 45
                                           ; SOURCE LINE # 46
0039 C299              CLR     TI
                                           ; SOURCE LINE # 48
003B 900000      R     MOV     DPTR,#t_out
003E E0                MOVX    A,@DPTR
003F FF                MOV     R7,A
0040 900000      R     MOV     DPTR,#t_in
0043 E0                MOVX    A,@DPTR
0044 6F                XRL     A,R7
0045 6013              JZ      ?C0004
                                           ; SOURCE LINE # 49
0047 A3                INC     DPTR
0048 E0                MOVX    A,@DPTR
C51 COMPILER V6.22f  SIO                                                                   02/14/2002 12:21:24 PAGE 6   

0049 04                INC     A
004A F0                MOVX    @DPTR,A
004B 7400        R     MOV     A,#LOW tbuf
004D 2F                ADD     A,R7
004E F582              MOV     DPL,A
0050 E4                CLR     A
0051 3400        R     ADDC    A,#HIGH tbuf
0053 F583              MOV     DPH,A
0055 E0                MOVX    A,@DPTR
0056 F599              MOV     SBUF,A
0058 8006              SJMP    ?C0006
005A         ?C0004:
                                           ; SOURCE LINE # 51
005A 900000      R     MOV     DPTR,#t_disabled
005D 7401              MOV     A,#01H
005F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 52
                                           ; SOURCE LINE # 54
0060         ?C0006:
0060 D0D0              POP     PSW
0062 D082              POP     DPL
0064 D083              POP     DPH
0066 D0E0              POP     ACC
0068 32                RETI    
             ; FUNCTION com_isr (END)

             ; FUNCTION com_initialize (BEGIN)
                                           ; SOURCE LINE # 58
                                           ; SOURCE LINE # 59
                                           ; SOURCE LINE # 63
0000 7FB0              MOV     R7,#0B0H
0002 7E04              MOV     R6,#04H
0004 120000      R     LCALL   _com_baudrate
                                           ; SOURCE LINE # 68
0007 C2AF              CLR     EA
                                           ; SOURCE LINE # 70
0009 E4                CLR     A
000A 900000      R     MOV     DPTR,#t_in
000D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 71
000E A3                INC     DPTR
000F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 72
0010 900000      R     MOV     DPTR,#t_disabled
0013 04                INC     A
0014 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 74
0015 E4                CLR     A
0016 A3                INC     DPTR
0017 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 75
0018 A3                INC     DPTR
0019 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 80
001A C29F              CLR     SM0
001C D29E              SETB    SM1
                                           ; SOURCE LINE # 81
001E C29D              CLR     SM2
                                           ; SOURCE LINE # 82
0020 D29C              SETB    REN
                                           ; SOURCE LINE # 84
0022 C299              CLR     TI
C51 COMPILER V6.22f  SIO                                                                   02/14/2002 12:21:24 PAGE 7   

                                           ; SOURCE LINE # 85
0024 C298              CLR     RI
                                           ; SOURCE LINE # 87
0026 D2AC              SETB    ES
                                           ; SOURCE LINE # 88
0028 C2BC              CLR     PS
                                           ; SOURCE LINE # 90
002A D2AF              SETB    EA
                                           ; SOURCE LINE # 91
002C 22                RET     
             ; FUNCTION com_initialize (END)

             ; FUNCTION _com_baudrate (BEGIN)
                                           ; SOURCE LINE # 95
;---- Variable 'baudrate' assigned to Register 'R6/R7' ----
                                           ; SOURCE LINE # 97
                                           ; SOURCE LINE # 98
0000 C2AF              CLR     EA
                                           ; SOURCE LINE # 103
0002 C299              CLR     TI
                                           ; SOURCE LINE # 104
0004 E4                CLR     A
0005 900000      R     MOV     DPTR,#t_in
0008 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 105
0009 A3                INC     DPTR
000A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 106
000B 900000      R     MOV     DPTR,#t_disabled
000E 04                INC     A
000F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 111
0010 C28E              CLR     TR1
                                           ; SOURCE LINE # 112
0012 C2AB              CLR     ET1
                                           ; SOURCE LINE # 114
0014 438780            ORL     PCON,#080H
                                           ; SOURCE LINE # 116
0017 53890F            ANL     TMOD,#0FH
                                           ; SOURCE LINE # 117
001A 438920            ORL     TMOD,#020H
                                           ; SOURCE LINE # 119
001D E4                CLR     A
001E FC                MOV     R4,A
001F FD                MOV     R5,A
0020 7BC0              MOV     R3,#0C0H
0022 FA                MOV     R2,A
0023 F9                MOV     R1,A
0024 F8                MOV     R0,A
0025 120000      E     LCALL   ?C?LMUL
0028 A804              MOV     R0,AR4
002A A905              MOV     R1,AR5
002C AA06              MOV     R2,AR6
002E AB07              MOV     R3,AR7
0030 7F00              MOV     R7,#00H
0032 7E1B              MOV     R6,#01BH
0034 7DB7              MOV     R5,#0B7H
0036 7C00              MOV     R4,#00H
0038 120000      E     LCALL   ?C?SLDIV
003B EF                MOV     A,R7
003C F4                CPL     A
003D 04                INC     A
C51 COMPILER V6.22f  SIO                                                                   02/14/2002 12:21:24 PAGE 8   

003E F58D              MOV     TH1,A
                                           ; SOURCE LINE # 121
0040 D28E              SETB    TR1
                                           ; SOURCE LINE # 123
0042 D2AF              SETB    EA
                                           ; SOURCE LINE # 124
0044 22                RET     
             ; FUNCTION _com_baudrate (END)

             ; FUNCTION _com_putchar (BEGIN)
                                           ; SOURCE LINE # 128
0000 8F00        R     MOV     c,R7
                                           ; SOURCE LINE # 130
                                           ; SOURCE LINE # 134
0002 120000      R     LCALL   com_tbuflen
0005 C3                CLR     C
0006 E4                CLR     A
0007 9F                SUBB    A,R7
0008 FF                MOV     R7,A
0009 7401              MOV     A,#01H
000B 9400              SUBB    A,#00H
000D FE                MOV     R6,A
000E D3                SETB    C
000F EF                MOV     A,R7
0010 9402              SUBB    A,#02H
0012 EE                MOV     A,R6
0013 9400              SUBB    A,#00H
0015 5003              JNC     ?C0009
                                           ; SOURCE LINE # 135
0017 7FFF              MOV     R7,#0FFH
0019 22                RET     
001A         ?C0009:
                                           ; SOURCE LINE # 141
001A C2AF              CLR     EA
                                           ; SOURCE LINE # 143
001C 900000      R     MOV     DPTR,#t_in
001F E0                MOVX    A,@DPTR
0020 FF                MOV     R7,A
0021 04                INC     A
0022 F0                MOVX    @DPTR,A
0023 7400        R     MOV     A,#LOW tbuf
0025 2F                ADD     A,R7
0026 F582              MOV     DPL,A
0028 E4                CLR     A
0029 3400        R     ADDC    A,#HIGH tbuf
002B F583              MOV     DPH,A
002D E500        R     MOV     A,c
002F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 145
0030 900000      R     MOV     DPTR,#t_disabled
0033 E0                MOVX    A,@DPTR
0034 6004              JZ      ?C0011
                                           ; SOURCE LINE # 146
                                           ; SOURCE LINE # 147
0036 E4                CLR     A
0037 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 148
0038 D299              SETB    TI
                                           ; SOURCE LINE # 149
003A         ?C0011:
                                           ; SOURCE LINE # 151
003A D2AF              SETB    EA
C51 COMPILER V6.22f  SIO                                                                   02/14/2002 12:21:24 PAGE 9   

                                           ; SOURCE LINE # 153
003C 7F00              MOV     R7,#00H
                                           ; SOURCE LINE # 154
003E         ?C0010:
003E 22                RET     
             ; FUNCTION _com_putchar (END)

             ; FUNCTION com_getchar (BEGIN)
                                           ; SOURCE LINE # 158
                                           ; SOURCE LINE # 159
                                           ; SOURCE LINE # 162
0000 120000      R     LCALL   com_rbuflen
0003 EF                MOV     A,R7
0004 7005              JNZ     ?C0012
                                           ; SOURCE LINE # 163
0006 7EFF              MOV     R6,#0FFH
0008 7FFF              MOV     R7,#0FFH
000A 22                RET     
000B         ?C0012:
                                           ; SOURCE LINE # 165
000B C2AF              CLR     EA
                                           ; SOURCE LINE # 166
000D 900000      R     MOV     DPTR,#r_out
0010 E0                MOVX    A,@DPTR
0011 FF                MOV     R7,A
0012 04                INC     A
0013 F0                MOVX    @DPTR,A
0014 7400        R     MOV     A,#LOW rbuf
0016 2F                ADD     A,R7
0017 F582              MOV     DPL,A
0019 E4                CLR     A
001A 3400        R     ADDC    A,#HIGH rbuf
001C F583              MOV     DPH,A
001E E0                MOVX    A,@DPTR
001F FF                MOV     R7,A
0020 7E00              MOV     R6,#00H
;---- Variable 'c' assigned to Register 'R6/R7' ----
                                           ; SOURCE LINE # 167
0022 D2AF              SETB    EA
                                           ; SOURCE LINE # 169
                                           ; SOURCE LINE # 170
0024         ?C0013:
0024 22                RET     
             ; FUNCTION com_getchar (END)

             ; FUNCTION com_rbuflen (BEGIN)
                                           ; SOURCE LINE # 174
                                           ; SOURCE LINE # 175
                                           ; SOURCE LINE # 176
0000 900000      R     MOV     DPTR,#r_out
0003 E0                MOVX    A,@DPTR
0004 FF                MOV     R7,A
0005 900000      R     MOV     DPTR,#r_in
0008 E0                MOVX    A,@DPTR
0009 C3                CLR     C
000A 9F                SUBB    A,R7
000B FF                MOV     R7,A
                                           ; SOURCE LINE # 177
000C         ?C0014:
000C 22                RET     
             ; FUNCTION com_rbuflen (END)

C51 COMPILER V6.22f  SIO                                                                   02/14/2002 12:21:24 PAGE 10  

             ; FUNCTION com_tbuflen (BEGIN)
                                           ; SOURCE LINE # 181
                                           ; SOURCE LINE # 182
                                           ; SOURCE LINE # 183
0000 900000      R     MOV     DPTR,#t_out
0003 E0                MOVX    A,@DPTR
0004 FF                MOV     R7,A
0005 900000      R     MOV     DPTR,#t_in
0008 E0                MOVX    A,@DPTR
0009 C3                CLR     C
000A 9F                SUBB    A,R7
000B FF                MOV     R7,A
                                           ; SOURCE LINE # 184
000C         ?C0015:
000C 22                RET     
             ; FUNCTION com_tbuflen (END)

C51 COMPILER V6.22f  SIO                                                                   02/14/2002 12:21:24 PAGE 11  

NAME                                    CLASS   MSPACE  TYPE    OFFSET  SIZE
====                                    =====   ======  ====    ======  ====


com_getchar. . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  c. . . . . . . . . . . . . . . . . .  * REG *  DATA   INT      0006H  2
T0 . . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00B4H  1
AC . . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00D6H  1
T1 . . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00B5H  1
EA . . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00AFH  1
t_disabled . . . . . . . . . . . . . .  STATIC   XDATA  U_CHAR   0000H  1
size_t . . . . . . . . . . . . . . . .  TYPEDEF  -----  U_INT    -----  2
com_rbuflen. . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
com_tbuflen. . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
RD . . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00B7H  1
ES . . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00ACH  1
RI . . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      0098H  1
INT0 . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00B2H  1
CY . . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00D7H  1
TI . . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      0099H  1
INT1 . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00B3H  1
PS . . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00BCH  1
OV . . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00D2H  1
WR . . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00B6H  1
r_in . . . . . . . . . . . . . . . . .  STATIC   XDATA  U_CHAR   0001H  1
r_out. . . . . . . . . . . . . . . . .  STATIC   XDATA  U_CHAR   0002H  1
t_in . . . . . . . . . . . . . . . . .  STATIC   XDATA  U_CHAR   0003H  1
t_out. . . . . . . . . . . . . . . . .  STATIC   XDATA  U_CHAR   0004H  1
rbuf . . . . . . . . . . . . . . . . .  STATIC   XDATA  ARRAY    0005H  256
SBUF . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   0099H  1
PCON . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   0087H  1
tbuf . . . . . . . . . . . . . . . . .  STATIC   XDATA  ARRAY    0105H  256
TMOD . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   0089H  1
IE0. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      0089H  1
IE1. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      008BH  1
ET0. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00A9H  1
ET1. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00ABH  1
TF0. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      008DH  1
TF1. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      008FH  1
RB8. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      009AH  1
EX0. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00A8H  1
IT0. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      0088H  1
TH1. . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   008DH  1
_com_baudrate. . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  baudrate . . . . . . . . . . . . . .  * REG *  DATA   U_INT    0006H  2
TB8. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      009BH  1
EX1. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00AAH  1
IT1. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      008AH  1
P. . . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00D0H  1
SM0. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      009FH  1
SM1. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      009EH  1
SM2. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      009DH  1
PT0. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00B9H  1
PT1. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00BBH  1
RS0. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00D3H  1
TR0. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      008CH  1
RS1. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00D4H  1
TR1. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      008EH  1
PX0. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00B8H  1
PX1. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00BAH  1
com_initialize . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
C51 COMPILER V6.22f  SIO                                                                   02/14/2002 12:21:24 PAGE 12  

NAME                                    CLASS   MSPACE  TYPE    OFFSET  SIZE
====                                    =====   ======  ====    ======  ====


REN. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      009CH  1
RXD. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00B0H  1
com_isr. . . . . . . . . . . . . . . .  STATIC   CODE   PROC     0000H  -----
TXD. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00B1H  1
F0 . . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00D5H  1
_com_putchar . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  c. . . . . . . . . . . . . . . . . .  AUTO     DATA   U_CHAR   0000H  1


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    345    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =    517    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----       1
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
